# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Category {
  id: ID!
  title: String
  slug: String
  summary: String
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  summary: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
}

input CategoryUpdateInput {
  title: String
  slug: String
  summary: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  title: String
  slug: String
  summary: String
}

type Publisher {
  id: ID!
  title: String
  official_site: String
  rss: String
  summary: String
  logo: String
  description: String
  lang: String
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  title: StringFilter
  official_site: StringFilter
  rss: StringFilter
  summary: StringFilter
  logo: StringFilter
  description: StringFilter
  lang: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PublisherOrderByInput {
  id: OrderDirection
  title: OrderDirection
  official_site: OrderDirection
  rss: OrderDirection
  summary: OrderDirection
  logo: OrderDirection
  description: OrderDirection
  lang: OrderDirection
}

input PublisherUpdateInput {
  title: String
  official_site: String
  rss: String
  summary: String
  logo: String
  description: String
  lang: String
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  title: String
  official_site: String
  rss: String
  summary: String
  logo: String
  description: String
  lang: String
}

type Story {
  id: ID!
  title: String
  url: String
  summary: String
  content: String
  source: Publisher
  author: Member
  published_date: DateTime
  og_title: String
  og_image: String
  og_description: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input StoryWhereUniqueInput {
  id: ID
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  summary: StringFilter
  content: StringFilter
  source: PublisherWhereInput
  author: MemberWhereInput
  published_date: DateTimeNullableFilter
  og_title: StringFilter
  og_image: StringFilter
  og_description: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  summary: OrderDirection
  content: OrderDirection
  published_date: OrderDirection
  og_title: OrderDirection
  og_image: OrderDirection
  og_description: OrderDirection
}

input StoryUpdateInput {
  title: String
  url: String
  summary: String
  content: String
  source: PublisherRelateToOneForUpdateInput
  author: MemberRelateToOneForUpdateInput
  published_date: DateTime
  og_title: String
  og_image: String
  og_description: String
}

input PublisherRelateToOneForUpdateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
  disconnect: Boolean
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input StoryUpdateArgs {
  where: StoryWhereUniqueInput!
  data: StoryUpdateInput!
}

input StoryCreateInput {
  title: String
  url: String
  summary: String
  content: String
  source: PublisherRelateToOneForCreateInput
  author: MemberRelateToOneForCreateInput
  published_date: DateTime
  og_title: String
  og_image: String
  og_description: String
}

input PublisherRelateToOneForCreateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

type Pick {
  id: ID!
  member: Member
  story: Story
  comment: String
  picked_date: DateTime
  kind: String
  state: String
  paywall: Boolean
}

input PickWhereUniqueInput {
  id: ID
}

input PickWhereInput {
  AND: [PickWhereInput!]
  OR: [PickWhereInput!]
  NOT: [PickWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  story: StoryWhereInput
  comment: StringFilter
  picked_date: DateTimeNullableFilter
  kind: StringNullableFilter
  state: StringNullableFilter
  paywall: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PickOrderByInput {
  id: OrderDirection
  comment: OrderDirection
  picked_date: OrderDirection
  kind: OrderDirection
  state: OrderDirection
  paywall: OrderDirection
}

input PickUpdateInput {
  member: MemberRelateToOneForUpdateInput
  story: StoryRelateToOneForUpdateInput
  comment: String
  picked_date: DateTime
  kind: String
  state: String
  paywall: Boolean
}

input StoryRelateToOneForUpdateInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
  disconnect: Boolean
}

input PickUpdateArgs {
  where: PickWhereUniqueInput!
  data: PickUpdateInput!
}

input PickCreateInput {
  member: MemberRelateToOneForCreateInput
  story: StoryRelateToOneForCreateInput
  comment: String
  picked_date: DateTime
  kind: String
  state: String
  paywall: Boolean
}

input StoryRelateToOneForCreateInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
}

type Member {
  id: ID!
  firebaseId: String
  name: String
  nickname: String
  email: String
  following(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  followingCount(where: MemberWhereInput! = {}): Int
  following_topic(
    where: TopicWhereInput! = {}
    orderBy: [TopicOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Topic!]
  following_topicCount(where: TopicWhereInput! = {}): Int
  follow_publisher(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  follow_publisherCount(where: PublisherWhereInput! = {}): Int
}

input MemberWhereUniqueInput {
  id: ID
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  firebaseId: StringFilter
  name: StringFilter
  nickname: StringFilter
  email: StringFilter
  following: MemberManyRelationFilter
  following_topic: TopicManyRelationFilter
  follow_publisher: PublisherManyRelationFilter
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input PublisherManyRelationFilter {
  every: PublisherWhereInput
  some: PublisherWhereInput
  none: PublisherWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  firebaseId: OrderDirection
  name: OrderDirection
  nickname: OrderDirection
  email: OrderDirection
}

input MemberUpdateInput {
  firebaseId: String
  name: String
  nickname: String
  email: String
  following: MemberRelateToManyForUpdateInput
  following_topic: TopicRelateToManyForUpdateInput
  follow_publisher: PublisherRelateToManyForUpdateInput
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input PublisherRelateToManyForUpdateInput {
  disconnect: [PublisherWhereUniqueInput!]
  set: [PublisherWhereUniqueInput!]
  create: [PublisherCreateInput!]
  connect: [PublisherWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  firebaseId: String
  name: String
  nickname: String
  email: String
  following: MemberRelateToManyForCreateInput
  following_topic: TopicRelateToManyForCreateInput
  follow_publisher: PublisherRelateToManyForCreateInput
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input PublisherRelateToManyForCreateInput {
  create: [PublisherCreateInput!]
  connect: [PublisherWhereUniqueInput!]
}

type Comment {
  id: ID!
  story: Story
  content: String
  parent: Comment
  root: Comment
  state: String
  published_date: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  story: StoryWhereInput
  content: StringFilter
  parent: CommentWhereInput
  root: CommentWhereInput
  state: StringNullableFilter
  published_date: DateTimeNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  content: OrderDirection
  state: OrderDirection
  published_date: OrderDirection
}

input CommentUpdateInput {
  story: StoryRelateToOneForUpdateInput
  content: String
  parent: CommentRelateToOneForUpdateInput
  root: CommentRelateToOneForUpdateInput
  state: String
  published_date: DateTime
}

input CommentRelateToOneForUpdateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  story: StoryRelateToOneForCreateInput
  content: String
  parent: CommentRelateToOneForCreateInput
  root: CommentRelateToOneForCreateInput
  state: String
  published_date: DateTime
}

input CommentRelateToOneForCreateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

type Topic {
  id: ID!
  title: String
  slug: String
  summary: String
  public: String
  format: String
  creator: Member
}

input TopicWhereUniqueInput {
  id: ID
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  summary: StringFilter
  public: StringNullableFilter
  format: StringNullableFilter
  creator: MemberWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
  public: OrderDirection
  format: OrderDirection
}

input TopicUpdateInput {
  title: String
  slug: String
  summary: String
  public: String
  format: String
  creator: MemberRelateToOneForUpdateInput
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  title: String
  slug: String
  summary: String
  public: String
  format: String
  creator: MemberRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(
    where: PublisherWhereUniqueInput!
    data: PublisherUpdateInput!
  ): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createStory(data: StoryCreateInput!): Story
  createStories(data: [StoryCreateInput!]!): [Story]
  updateStory(where: StoryWhereUniqueInput!, data: StoryUpdateInput!): Story
  updateStories(data: [StoryUpdateArgs!]!): [Story]
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteStories(where: [StoryWhereUniqueInput!]!): [Story]
  createPick(data: PickCreateInput!): Pick
  createPicks(data: [PickCreateInput!]!): [Pick]
  updatePick(where: PickWhereUniqueInput!, data: PickUpdateInput!): Pick
  updatePicks(data: [PickUpdateArgs!]!): [Pick]
  deletePick(where: PickWhereUniqueInput!): Pick
  deletePicks(where: [PickWhereUniqueInput!]!): [Pick]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  publishers(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  stories(
    where: StoryWhereInput! = {}
    orderBy: [StoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Story!]
  story(where: StoryWhereUniqueInput!): Story
  storiesCount(where: StoryWhereInput! = {}): Int
  picks(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  pick(where: PickWhereUniqueInput!): Pick
  picksCount(where: PickWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  topics(
    where: TopicWhereInput! = {}
    orderBy: [TopicOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Topic!]
  topic(where: TopicWhereUniqueInput!): Topic
  topicsCount(where: TopicWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
