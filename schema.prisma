// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String @id @default(cuid())
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Category {
  id      String @id @default(cuid())
  title   String @default("")
  slug    String @default("")
  summary String @default("")
}

model Publisher {
  id                           String   @id @default(cuid())
  title                        String   @default("")
  official_site                String   @default("")
  rss                          String   @default("")
  summary                      String   @default("")
  logo                         String   @default("")
  description                  String   @default("")
  lang                         String?  @default("read")
  from_Story_source            Story[]  @relation("Story_source")
  from_Member_follow_publisher Member[] @relation("Member_follow_publisher")
}

model Story {
  id                 String     @id @default(cuid())
  title              String     @default("")
  url                String     @default("")
  summary            String     @default("")
  content            String     @default("")
  source             Publisher? @relation("Story_source", fields: [sourceId], references: [id])
  sourceId           String?    @map("source")
  author             Member?    @relation("Story_author", fields: [authorId], references: [id])
  authorId           String?    @map("author")
  published_date     DateTime?
  og_title           String     @default("")
  og_image           String     @default("")
  og_description     String     @default("")
  from_Pick_story    Pick[]     @relation("Pick_story")
  from_Comment_story Comment[]  @relation("Comment_story")

  @@index([sourceId])
  @@index([authorId])
}

model Pick {
  id          String    @id @default(cuid())
  member      Member?   @relation("Pick_member", fields: [memberId], references: [id])
  memberId    String?   @map("member")
  story       Story?    @relation("Pick_story", fields: [storyId], references: [id])
  storyId     String?   @map("story")
  comment     String    @default("")
  picked_date DateTime?
  kind        String?   @default("read")
  state       String?   @default("public")
  paywall     Boolean   @default(false)

  @@index([memberId])
  @@index([storyId])
}

model Member {
  id                    String      @id @default(cuid())
  firebaseId            String      @default("")
  name                  String      @default("")
  nickname              String      @default("")
  email                 String      @default("")
  following             Member[]    @relation("Member_following")
  following_topic       Topic[]     @relation("Member_following_topic")
  follow_publisher      Publisher[] @relation("Member_follow_publisher")
  from_Story_author     Story[]     @relation("Story_author")
  from_Pick_member      Pick[]      @relation("Pick_member")
  from_Member_following Member[]    @relation("Member_following")
  from_Topic_creator    Topic[]     @relation("Topic_creator")
}

model Comment {
  id                  String    @id @default(cuid())
  story               Story?    @relation("Comment_story", fields: [storyId], references: [id])
  storyId             String?   @map("story")
  content             String    @default("")
  parent              Comment?  @relation("Comment_parent", fields: [parentId], references: [id])
  parentId            String?   @map("parent")
  root                Comment?  @relation("Comment_root", fields: [rootId], references: [id])
  rootId              String?   @map("root")
  state               String?   @default("public")
  published_date      DateTime?
  from_Comment_parent Comment[] @relation("Comment_parent")
  from_Comment_root   Comment[] @relation("Comment_root")

  @@index([storyId])
  @@index([parentId])
  @@index([rootId])
}

model Topic {
  id                          String   @id @default(cuid())
  title                       String   @default("")
  slug                        String   @default("")
  summary                     String   @default("")
  public                      String?
  format                      String?
  creator                     Member?  @relation("Topic_creator", fields: [creatorId], references: [id])
  creatorId                   String?  @map("creator")
  from_Member_following_topic Member[] @relation("Member_following_topic")

  @@index([creatorId])
}