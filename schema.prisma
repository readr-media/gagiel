// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Category {
  id                             Int      @id @default(autoincrement())
  title                          String   @default("")
  slug                           String   @default("")
  summary                        String   @default("")
  from_Story_category            Story[]  @relation("Story_category")
  from_Member_following_category Member[] @relation("Member_following_category")
}

model Collection {
  id                                Int                 @id @default(autoincrement())
  title                             String              @default("")
  slug                              String              @default("")
  summary                           String              @default("")
  public                            String?
  format                            String?
  comment                           Comment[]           @relation("Collection_comment")
  creator                           Member?             @relation("Collection_creator", fields: [creatorId], references: [id])
  creatorId                         Int?                @map("creator")
  from_CollectionMember_collection  CollectionMember[]  @relation("CollectionMember_collection")
  from_PicksinCollection_collection PicksinCollection[] @relation("PicksinCollection_collection")
  from_Pick_collection              Pick[]              @relation("Pick_collection")
  from_Member_following_collection  Member[]            @relation("Member_following_collection")

  @@index([creatorId])
}

model CollectionMember {
  id           Int         @id @default(autoincrement())
  collection   Collection? @relation("CollectionMember_collection", fields: [collectionId], references: [id])
  collectionId Int?        @map("collection")
  member       Member?     @relation("CollectionMember_member", fields: [memberId], references: [id])
  memberId     Int?        @map("member")
  added_by     Member?     @relation("CollectionMember_added_by", fields: [added_byId], references: [id])
  added_byId   Int?        @map("added_by")
  updated_by   Member?     @relation("CollectionMember_updated_by", fields: [updated_byId], references: [id])
  updated_byId Int?        @map("updated_by")
  role         String?
  added_date   DateTime?
  updated_date DateTime?

  @@index([collectionId])
  @@index([memberId])
  @@index([added_byId])
  @@index([updated_byId])
}

model PicksinCollection {
  id           Int         @id @default(autoincrement())
  story        Pick?       @relation("PicksinCollection_story", fields: [storyId], references: [id])
  storyId      Int?        @map("story")
  collection   Collection? @relation("PicksinCollection_collection", fields: [collectionId], references: [id])
  collectionId Int?        @map("collection")
  summary      String      @default("")
  creator      Member?     @relation("PicksinCollection_creator", fields: [creatorId], references: [id])
  creatorId    Int?        @map("creator")
  objective    String?
  picked_date  DateTime?
  updated_date DateTime?

  @@index([storyId])
  @@index([collectionId])
  @@index([creatorId])
}

model Publisher {
  id                           Int      @id @default(autoincrement())
  title                        String   @default("")
  official_site                String   @default("")
  rss                          String   @default("")
  summary                      String   @default("")
  logo                         String   @default("")
  description                  String   @default("")
  lang                         String?  @default("zh-TW")
  full_content                 Boolean  @default(false)
  full_screen_ad               String?  @default("none")
  from_Story_source            Story[]  @relation("Story_source")
  from_Member_follow_publisher Member[] @relation("Member_follow_publisher")
}

model Story {
  id             Int        @id @default(autoincrement())
  title          String     @default("")
  url            String     @default("")
  summary        String     @default("")
  content        String     @default("")
  source         Publisher? @relation("Story_source", fields: [sourceId], references: [id])
  sourceId       Int?       @map("source")
  author         Member?    @relation("Story_author", fields: [authorId], references: [id])
  authorId       Int?       @map("author")
  category       Category?  @relation("Story_category", fields: [categoryId], references: [id])
  categoryId     Int?       @map("category")
  pick           Pick[]     @relation("Pick_story")
  comment        Comment[]  @relation("Comment_story")
  published_date DateTime?
  og_title       String     @default("")
  og_image       String     @default("")
  og_description String     @default("")
  full_content   Boolean    @default(false)
  paywall        Boolean    @default(false)
  full_screen_ad String?    @default("none")
  is_active      Boolean    @default(true)

  @@index([sourceId])
  @@index([authorId])
  @@index([categoryId])
}

model Pick {
  id                           Int                 @id @default(autoincrement())
  member                       Member?             @relation("Pick_member", fields: [memberId], references: [id])
  memberId                     Int?                @map("member")
  objective                    String?
  story                        Story?              @relation("Pick_story", fields: [storyId], references: [id])
  storyId                      Int?                @map("story")
  collection                   Collection?         @relation("Pick_collection", fields: [collectionId], references: [id])
  collectionId                 Int?                @map("collection")
  comment                      Comment?            @relation("Pick_comment", fields: [commentId], references: [id])
  commentId                    Int?                @map("comment")
  pick_comment                 Comment[]           @relation("Pick_pick_comment")
  kind                         String?             @default("read")
  state                        String?             @default("public")
  picked_date                  DateTime?
  paywall                      Boolean             @default(false)
  is_active                    Boolean             @default(true)
  from_PicksinCollection_story PicksinCollection[] @relation("PicksinCollection_story")

  @@index([memberId])
  @@index([storyId])
  @@index([collectionId])
  @@index([commentId])
}

model Member {
  id                               Int                 @id @default(autoincrement())
  firebaseId                       String              @default("")
  customId                         String              @default("")
  name                             String              @default("")
  nickname                         String              @default("")
  avatar                           String              @default("")
  intro                            String              @default("")
  email                            String              @default("")
  is_active                        Boolean             @default(true)
  verified                         Boolean             @default(false)
  pick                             Pick[]              @relation("Pick_member")
  comment                          Comment[]           @relation("Member_comment")
  member_like                      Comment[]           @relation("Comment_like")
  follower                         Member[]            @relation("Member_follower")
  following                        Member[]            @relation("Member_follower")
  following_category               Category[]          @relation("Member_following_category")
  following_collection             Collection[]        @relation("Member_following_collection")
  follow_publisher                 Publisher[]         @relation("Member_follow_publisher")
  from_Collection_creator          Collection[]        @relation("Collection_creator")
  from_CollectionMember_member     CollectionMember[]  @relation("CollectionMember_member")
  from_CollectionMember_added_by   CollectionMember[]  @relation("CollectionMember_added_by")
  from_CollectionMember_updated_by CollectionMember[]  @relation("CollectionMember_updated_by")
  from_PicksinCollection_creator   PicksinCollection[] @relation("PicksinCollection_creator")
  from_Story_author                Story[]             @relation("Story_author")
  from_Comment_member              Comment[]           @relation("Comment_member")
}

model Comment {
  id                      Int          @id @default(autoincrement())
  member                  Member?      @relation("Comment_member", fields: [memberId], references: [id])
  memberId                Int?         @map("member")
  story                   Story?       @relation("Comment_story", fields: [storyId], references: [id])
  storyId                 Int?         @map("story")
  content                 String       @default("")
  parent                  Comment?     @relation("Comment_parent", fields: [parentId], references: [id])
  parentId                Int?         @map("parent")
  root                    Comment?     @relation("Comment_root", fields: [rootId], references: [id])
  rootId                  Int?         @map("root")
  like                    Member[]     @relation("Comment_like")
  state                   String?      @default("public")
  published_date          DateTime?
  is_active               Boolean      @default(true)
  from_Collection_comment Collection[] @relation("Collection_comment")
  from_Pick_comment       Pick[]       @relation("Pick_comment")
  from_Pick_pick_comment  Pick[]       @relation("Pick_pick_comment")
  from_Member_comment     Member[]     @relation("Member_comment")
  from_Comment_parent     Comment[]    @relation("Comment_parent")
  from_Comment_root       Comment[]    @relation("Comment_root")

  @@index([memberId])
  @@index([storyId])
  @@index([parentId])
  @@index([rootId])
}